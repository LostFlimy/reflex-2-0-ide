/**
 * generated by Xtext 2.29.0
 */
package ru.iaie.reflex.reflex.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import ru.iaie.reflex.reflex.Bit;
import ru.iaie.reflex.reflex.Interrupted;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.Register;
import ru.iaie.reflex.reflex.StatementSequence;
import ru.iaie.reflex.reflex.Vector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interrupted</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.InterruptedImpl#getVec <em>Vec</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.InterruptedImpl#getReg <em>Reg</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.InterruptedImpl#getBit <em>Bit</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.InterruptedImpl#getStateFunction <em>State Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InterruptedImpl extends MinimalEObjectImpl.Container implements Interrupted
{
  /**
   * The cached value of the '{@link #getVec() <em>Vec</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVec()
   * @generated
   * @ordered
   */
  protected Vector vec;

  /**
   * The cached value of the '{@link #getReg() <em>Reg</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReg()
   * @generated
   * @ordered
   */
  protected Register reg;

  /**
   * The cached value of the '{@link #getBit() <em>Bit</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBit()
   * @generated
   * @ordered
   */
  protected Bit bit;

  /**
   * The cached value of the '{@link #getStateFunction() <em>State Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateFunction()
   * @generated
   * @ordered
   */
  protected StatementSequence stateFunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InterruptedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.INTERRUPTED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vector getVec()
  {
    if (vec != null && vec.eIsProxy())
    {
      InternalEObject oldVec = (InternalEObject)vec;
      vec = (Vector)eResolveProxy(oldVec);
      if (vec != oldVec)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.INTERRUPTED__VEC, oldVec, vec));
      }
    }
    return vec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Vector basicGetVec()
  {
    return vec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVec(Vector newVec)
  {
    Vector oldVec = vec;
    vec = newVec;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.INTERRUPTED__VEC, oldVec, vec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Register getReg()
  {
    if (reg != null && reg.eIsProxy())
    {
      InternalEObject oldReg = (InternalEObject)reg;
      reg = (Register)eResolveProxy(oldReg);
      if (reg != oldReg)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.INTERRUPTED__REG, oldReg, reg));
      }
    }
    return reg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Register basicGetReg()
  {
    return reg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReg(Register newReg)
  {
    Register oldReg = reg;
    reg = newReg;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.INTERRUPTED__REG, oldReg, reg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bit getBit()
  {
    if (bit != null && bit.eIsProxy())
    {
      InternalEObject oldBit = (InternalEObject)bit;
      bit = (Bit)eResolveProxy(oldBit);
      if (bit != oldBit)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.INTERRUPTED__BIT, oldBit, bit));
      }
    }
    return bit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bit basicGetBit()
  {
    return bit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBit(Bit newBit)
  {
    Bit oldBit = bit;
    bit = newBit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.INTERRUPTED__BIT, oldBit, bit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementSequence getStateFunction()
  {
    return stateFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateFunction(StatementSequence newStateFunction, NotificationChain msgs)
  {
    StatementSequence oldStateFunction = stateFunction;
    stateFunction = newStateFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexPackage.INTERRUPTED__STATE_FUNCTION, oldStateFunction, newStateFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStateFunction(StatementSequence newStateFunction)
  {
    if (newStateFunction != stateFunction)
    {
      NotificationChain msgs = null;
      if (stateFunction != null)
        msgs = ((InternalEObject)stateFunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.INTERRUPTED__STATE_FUNCTION, null, msgs);
      if (newStateFunction != null)
        msgs = ((InternalEObject)newStateFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.INTERRUPTED__STATE_FUNCTION, null, msgs);
      msgs = basicSetStateFunction(newStateFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.INTERRUPTED__STATE_FUNCTION, newStateFunction, newStateFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReflexPackage.INTERRUPTED__STATE_FUNCTION:
        return basicSetStateFunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.INTERRUPTED__VEC:
        if (resolve) return getVec();
        return basicGetVec();
      case ReflexPackage.INTERRUPTED__REG:
        if (resolve) return getReg();
        return basicGetReg();
      case ReflexPackage.INTERRUPTED__BIT:
        if (resolve) return getBit();
        return basicGetBit();
      case ReflexPackage.INTERRUPTED__STATE_FUNCTION:
        return getStateFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.INTERRUPTED__VEC:
        setVec((Vector)newValue);
        return;
      case ReflexPackage.INTERRUPTED__REG:
        setReg((Register)newValue);
        return;
      case ReflexPackage.INTERRUPTED__BIT:
        setBit((Bit)newValue);
        return;
      case ReflexPackage.INTERRUPTED__STATE_FUNCTION:
        setStateFunction((StatementSequence)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.INTERRUPTED__VEC:
        setVec((Vector)null);
        return;
      case ReflexPackage.INTERRUPTED__REG:
        setReg((Register)null);
        return;
      case ReflexPackage.INTERRUPTED__BIT:
        setBit((Bit)null);
        return;
      case ReflexPackage.INTERRUPTED__STATE_FUNCTION:
        setStateFunction((StatementSequence)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.INTERRUPTED__VEC:
        return vec != null;
      case ReflexPackage.INTERRUPTED__REG:
        return reg != null;
      case ReflexPackage.INTERRUPTED__BIT:
        return bit != null;
      case ReflexPackage.INTERRUPTED__STATE_FUNCTION:
        return stateFunction != null;
    }
    return super.eIsSet(featureID);
  }

} //InterruptedImpl
